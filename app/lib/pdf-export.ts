import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export interface ConversationMessage {
  id: string;
  role: 'user' | 'assistant' | 'system' | 'thinking' | 'verses';
  content: string;
  timestamp: Date;
  metadata?: {
    searchResults?: Array<{
      id: string;
      title: string;
      content?: string;
      relevance: number;
      source?: string;
    }>;
  };
}

export interface PDFExportOptions {
  title?: string;
  watermark?: string;
  includeMetadata?: boolean;
}

/**
 * Export conversation to PDF with watermark
 */
export async function exportConversationToPDF(
  messages: ConversationMessage[],
  options: PDFExportOptions = {}
): Promise<void> {
  const {
    title = 'Sanskrit Assistant Conversation',
    watermark = 'indhic.com',
    includeMetadata = true
  } = options;

  try {
    // Create PDF document
    const pdf = new jsPDF('p', 'mm', 'a4');
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    const contentWidth = pageWidth - (margin * 2);
    
    let currentY = margin;
    const lineHeight = 6;
    const sectionSpacing = 10;

    // Helper function to add watermark
    const addWatermark = () => {
      pdf.setGState(pdf.GState({ opacity: 0.1 }));
      pdf.setFontSize(60);
      pdf.setTextColor(200, 200, 200);
      pdf.text(watermark, pageWidth / 2, pageHeight / 2, { 
        angle: 45, 
        align: 'center' 
      });
      pdf.setGState(pdf.GState({ opacity: 1 }));
    };

    // Add watermark to first page
    addWatermark();

    // Add title
    pdf.setFontSize(20);
    pdf.setTextColor(0, 0, 0);
    pdf.setFont('helvetica', 'bold');
    pdf.text(title, margin, currentY);
    currentY += lineHeight * 2;

    // Add timestamp
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    pdf.setTextColor(100, 100, 100);
    pdf.text(`Generated on: ${new Date().toLocaleString()}`, margin, currentY);
    currentY += lineHeight * 2;

    // Process messages
    for (const message of messages) {
      // Check if we need a new page
      if (currentY > pageHeight - margin - 50) {
        pdf.addPage();
        addWatermark();
        currentY = margin;
      }

      // Message header
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'bold');
      pdf.setTextColor(0, 0, 0);
      
      const roleLabel = getRoleLabel(message.role);
      const timestamp = message.timestamp.toLocaleString();
      pdf.text(`${roleLabel} - ${timestamp}`, margin, currentY);
      currentY += lineHeight;

      // Message content
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(0, 0, 0);

      // Handle different message types
      if (message.role === 'verses' && message.metadata?.searchResults) {
        // Special handling for verses
        pdf.text('Found Verses:', margin, currentY);
        currentY += lineHeight;
        
        message.metadata.searchResults.forEach((verse, index) => {
          if (currentY > pageHeight - margin - 30) {
            pdf.addPage();
            addWatermark();
            currentY = margin;
          }

          // Verse header
          pdf.setFont('helvetica', 'bold');
          pdf.text(`Verse ${index + 1} (${(verse.relevance * 100).toFixed(1)}% match)`, margin, currentY);
          currentY += lineHeight;

          // Source
          if (verse.source) {
            pdf.setFont('helvetica', 'italic');
            pdf.text(`Source: ${verse.source}`, margin, currentY);
            currentY += lineHeight;
          }

          // Content
          pdf.setFont('helvetica', 'normal');
          const content = verse.content || verse.title || 'No content available';
          const lines = pdf.splitTextToSize(content, contentWidth);
          pdf.text(lines, margin, currentY);
          currentY += lineHeight * lines.length + 5;
        });
      } else {
        // Regular message content
        const content = message.content;
        const lines = pdf.splitTextToSize(content, contentWidth);
        pdf.text(lines, margin, currentY);
        currentY += lineHeight * lines.length;
      }

      currentY += sectionSpacing;
    }

    // Add footer
    const totalPages = pdf.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.setTextColor(150, 150, 150);
      pdf.text(
        `Page ${i} of ${totalPages} - Generated by ${watermark}`,
        pageWidth / 2,
        pageHeight - 10,
        { align: 'center' }
      );
    }

    // Save the PDF
    const fileName = `sanskrit-conversation-${new Date().toISOString().split('T')[0]}.pdf`;
    pdf.save(fileName);

  } catch (error) {
    console.error('Error exporting to PDF:', error);
    throw new Error('Failed to export conversation to PDF');
  }
}

/**
 * Get display label for message role
 */
function getRoleLabel(role: string): string {
  switch (role) {
    case 'user':
      return 'User';
    case 'assistant':
      return 'Assistant';
    case 'system':
      return 'System';
    case 'thinking':
      return 'Processing';
    case 'verses':
      return 'Found Verses';
    default:
      return 'Unknown';
  }
}

/**
 * Export conversation from DOM element (alternative method)
 */
export async function exportConversationFromDOM(
  elementId: string,
  options: PDFExportOptions = {}
): Promise<void> {
  const {
    title = 'Sanskrit Assistant Conversation',
    watermark = 'indhic.com'
  } = options;

  try {
    const element = document.getElementById(elementId);
    if (!element) {
      throw new Error('Element not found');
    }

    // Convert element to canvas
    const canvas = await html2canvas(element, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff'
    });

    // Create PDF
    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF('p', 'mm', 'a4');
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    
    // Calculate dimensions to fit image
    const imgWidth = canvas.width;
    const imgHeight = canvas.height;
    const ratio = Math.min(pageWidth / imgWidth, pageHeight / imgHeight);
    const finalWidth = imgWidth * ratio;
    const finalHeight = imgHeight * ratio;

    // Add watermark
    pdf.setGState(pdf.GState({ opacity: 0.1 }));
    pdf.setFontSize(60);
    pdf.setTextColor(200, 200, 200);
    pdf.text(watermark, pageWidth / 2, pageHeight / 2, { 
      angle: 45, 
      align: 'center' 
    });
    pdf.setGState(pdf.GState({ opacity: 1 }));

    // Add image
    pdf.addImage(imgData, 'PNG', 0, 0, finalWidth, finalHeight);

    // Add title
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(0, 0, 0);
    pdf.text(title, 20, 20);

    // Save PDF
    const fileName = `sanskrit-conversation-${new Date().toISOString().split('T')[0]}.pdf`;
    pdf.save(fileName);

  } catch (error) {
    console.error('Error exporting DOM to PDF:', error);
    throw new Error('Failed to export conversation to PDF');
  }
}
